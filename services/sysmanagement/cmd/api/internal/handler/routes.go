// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package handler

import (
	"net/http"

	dictionary "asense/services/sysmanagement/cmd/api/internal/handler/dictionary"
	menu "asense/services/sysmanagement/cmd/api/internal/handler/menu"
	role "asense/services/sysmanagement/cmd/api/internal/handler/role"
	sysinit "asense/services/sysmanagement/cmd/api/internal/handler/sysinit"
	user "asense/services/sysmanagement/cmd/api/internal/handler/user"
	"asense/services/sysmanagement/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 新增字典
				Method:  http.MethodPost,
				Path:    "/dictionary/add",
				Handler: dictionary.DictionaryAddHandler(serverCtx),
			},
			{
				// 删除字典
				Method:  http.MethodDelete,
				Path:    "/dictionary/del/:id",
				Handler: dictionary.DictionaryDelHandler(serverCtx),
			},
			{
				// 字典详情
				Method:  http.MethodGet,
				Path:    "/dictionary/detail/:id",
				Handler: dictionary.DictionaryDetailHandler(serverCtx),
			},
			{
				// 编辑字典
				Method:  http.MethodPut,
				Path:    "/dictionary/edit/:id",
				Handler: dictionary.DictionaryEditHandler(serverCtx),
			},
			{
				// 启用|禁用字典
				Method:  http.MethodPut,
				Path:    "/dictionary/enable/:id",
				Handler: dictionary.DictionaryEnableHandler(serverCtx),
			},
			{
				// 字典列表
				Method:  http.MethodGet,
				Path:    "/dictionary/list",
				Handler: dictionary.DictionaryListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JetAuth.AccessSecret),
		rest.WithPrefix("/sm/admin/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 新增菜单
				Method:  http.MethodPost,
				Path:    "/menu/add",
				Handler: menu.MenuAddHandler(serverCtx),
			},
			{
				// 获取所有菜单
				Method:  http.MethodGet,
				Path:    "/menu/all-list",
				Handler: menu.MenuAllListHandler(serverCtx),
			},
			{
				// 删除菜单
				Method:  http.MethodDelete,
				Path:    "/menu/del/:id",
				Handler: menu.MenuDelHandler(serverCtx),
			},
			{
				// 菜单详情
				Method:  http.MethodGet,
				Path:    "/menu/detail/:id",
				Handler: menu.MenuDetailHandler(serverCtx),
			},
			{
				// 编辑菜单
				Method:  http.MethodPut,
				Path:    "/menu/edit",
				Handler: menu.MenuEditHandler(serverCtx),
			},
			{
				// 启用|禁用菜单
				Method:  http.MethodPut,
				Path:    "/menu/enable/:id",
				Handler: menu.MenuEnableHandler(serverCtx),
			},
			{
				// 根据角色获取菜单列表
				Method:  http.MethodGet,
				Path:    "/menu/list-by-role/:id",
				Handler: menu.MenuListByRoleHandler(serverCtx),
			},
			{
				// 根据当前用户获取菜单列表
				Method:  http.MethodGet,
				Path:    "/menu/list-by-user",
				Handler: menu.MenuListByUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JetAuth.AccessSecret),
		rest.WithPrefix("/sm/admin/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 新增角色
				Method:  http.MethodPost,
				Path:    "/role/add",
				Handler: role.RoleAddHandler(serverCtx),
			},
			{
				// 删除角色
				Method:  http.MethodDelete,
				Path:    "/role/del/:id",
				Handler: role.RoleDelHandler(serverCtx),
			},
			{
				// 角色详情
				Method:  http.MethodGet,
				Path:    "/role/detail/:id",
				Handler: role.RoleDetailHandler(serverCtx),
			},
			{
				// 编辑角色
				Method:  http.MethodPut,
				Path:    "/role/edit/:id",
				Handler: role.RoleEditHandler(serverCtx),
			},
			{
				// 启用|禁用角色
				Method:  http.MethodPut,
				Path:    "/role/enable/:id",
				Handler: role.RoleEnableHandler(serverCtx),
			},
			{
				// 角色列表
				Method:  http.MethodGet,
				Path:    "/role/list",
				Handler: role.RoleListHandler(serverCtx),
			},
			{
				// 角色分页列表
				Method:  http.MethodGet,
				Path:    "/role/page",
				Handler: role.RolePageHandler(serverCtx),
			},
			{
				// 设置角色权限
				Method:  http.MethodPut,
				Path:    "/role/set-permission",
				Handler: role.RoleSetPermissionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JetAuth.AccessSecret),
		rest.WithPrefix("/sm/admin/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 系统初始化
				Method:  http.MethodPost,
				Path:    "/sysinit/init",
				Handler: sysinit.SysinitHandler(serverCtx),
			},
		},
		rest.WithPrefix("/sm/admin/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 新增用户
				Method:  http.MethodPost,
				Path:    "/user/add",
				Handler: user.UserAddHandler(serverCtx),
			},
			{
				// 编辑用户头像
				Method:  http.MethodPut,
				Path:    "/user/avatar/edit",
				Handler: user.UserAvatarEditHandler(serverCtx),
			},
			{
				// 修改密码
				Method:  http.MethodPut,
				Path:    "/user/change-pwd",
				Handler: user.UserChangePwdHandler(serverCtx),
			},
			{
				// 获取当前用户信息
				Method:  http.MethodGet,
				Path:    "/user/current",
				Handler: user.UserCurrentHandler(serverCtx),
			},
			{
				// 删除用户
				Method:  http.MethodDelete,
				Path:    "/user/del/:id",
				Handler: user.UserDelHandler(serverCtx),
			},
			{
				// 用户详情
				Method:  http.MethodGet,
				Path:    "/user/detail",
				Handler: user.UserDetailHandler(serverCtx),
			},
			{
				// 编辑用户
				Method:  http.MethodPut,
				Path:    "/user/edit/:id",
				Handler: user.UserEditHandler(serverCtx),
			},
			{
				// 启用|禁用用户
				Method:  http.MethodPut,
				Path:    "/user/enable/:id",
				Handler: user.UserEnableHandler(serverCtx),
			},
			{
				// 退出登录
				Method:  http.MethodPost,
				Path:    "/user/logout",
				Handler: user.UserLogoutHandler(serverCtx),
			},
			{
				// 用户分页列表
				Method:  http.MethodGet,
				Path:    "/user/page",
				Handler: user.UserPageHandler(serverCtx),
			},
			{
				// 刷新用户Token
				Method:  http.MethodGet,
				Path:    "/user/refresh-token",
				Handler: user.UserRefreshTokenHandler(serverCtx),
			},
			{
				// 重置密码
				Method:  http.MethodPut,
				Path:    "/user/reset-pwd",
				Handler: user.UserResetPwdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JetAuth.AccessSecret),
		rest.WithPrefix("/sm/admin/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/sm/admin/api/v1"),
	)
}
